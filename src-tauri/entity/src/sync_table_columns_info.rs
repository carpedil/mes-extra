//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "sync_table_columns_info")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub table_name: String,
    pub column_name: String,
    pub column_desc: Option<String>,
    pub data_type: String,
    pub data_len: i32,
    pub is_exportable: bool,
    pub sort_type: String,
    pub ref_idx: String,
    pub created_at: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::sync_tables::Entity",
        from = "Column::RefIdx",
        to = "super::sync_tables::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    SyncTables,
}

impl Related<super::sync_tables::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SyncTables.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
