//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "sync_tables")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub sync_no: String,
    pub sync_version: i32,
    pub table_name: String,
    pub table_desc: Option<String>,
    pub is_exportable: bool,
    pub created_at: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "crate::sync_table_columns_info::Entity")]
    SyncTableColumnsInfo,
}

impl Related<super::sync_table_columns_info::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SyncTableColumnsInfo.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
